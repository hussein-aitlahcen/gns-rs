searchState.loadedDescShard("gns", 0, "Rust wrapper for Valve GameNetworkingSockets.\nContains the error value\nThe configuration value used to define configure global …\nWrapper around steam <code>sys::EResult</code>. The library ensure that …\nWraps the initialization/destruction of the low-level …\nA lane is represented by a Priority and a Weight\nA lane Id.\nOpaque wrapper around the low-level <code>sys::HSteamListenSocket</code>…\nA network message number. Simple alias for documentation.\nWrapper around the low-level equivalent. This type is used …\nOpaque wrapper around the low-level <code>sys::HSteamNetPollGroup</code>…\nOutcome of many functions from this library, basic type …\n<code>GnsSocket</code> is the most important structure of this library. …\nState of a <code>GnsSocket</code> that has been determined to be a …\nInitial state of a <code>GnsSocket</code>. This state represent a …\nCommon functions available for any <code>GnsSocket</code> state that is …\nState of a <code>GnsSocket</code> that has been determined to be a …\nContains the success value\nLane priority\nLane weight\nAccept an incoming connection. This operation is available …\nAllocate a new message to be sent. This message must be …\nConnect to a remote host, the socket transition from …\nReturn the socket connection. This operation is available …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to acquire a reference to the <code>GnsGlobal</code> instance.\nGet a connection lane status. This call is possible only …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnsafe function you will highly unlikely use.\nListen for incoming connections, the socket transition …\nInitialize a new socket in <code>IsCreated</code> state.\nReturn a reference to the connection event queue. The …\nPoll for incoming messages. K represent the maximum number …\nSet a global configuration value, i.e. …")